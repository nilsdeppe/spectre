// Distributed under the MIT License.
// See LICENSE.txt for details.

module AlgorithmArray {

  include "DataStructures/DataBox/DataBox.hpp";
  include "Utilities/TaggedTuple.hpp";
  include "Parallel/Callback.hpp";
  include "Parallel/GlobalCache.decl.h";
  include "Parallel/MaxInlineMethodsReached.hpp";
  include "Parallel/Phase.hpp";
  include "Evolution/DiscontinuousGalerkin/Messages/BoundaryMessage.decl.h";

  // note: the array index here is a hack to use our own types in the chare
  // array index. The way the ci file is parsed as of charm++ 6.10.2 is such
  // that:
  // - the array index type in `AlgorithmArray.decl.h` prepends "CkArrayIndex"
  //   to what appears in the square brackets, which then becomes
  //   `CkArrayIndexSpectreIndex_detail::ArrayIndex<SpectreArrayIndex>`, which
  //   refers to our type alias in `Parallel/ArrayIndex.hpp`.
  // - the array index type in `AlgorithmArray.def.h` is precisely what appears
  //   in the square brackets, so becomes
  //   `SpectreIndex_detail::ArrayIndex<SpectreArrayIndex>`, which also refers
  //   to one of our type aliases in `Parallel/ArrayIndex.hpp`
  template <typename ParallelComponent, typename SpectreArrayIndex>
  array [SpectreIndex_detail::ArrayIndex<SpectreArrayIndex>] AlgorithmArray {
    entry AlgorithmArray(
        Parallel::CProxy_GlobalCache<typename ParallelComponent::metavariables>,
        tuples::tagged_tuple_from_typelist<
            typename ParallelComponent::simple_tags_from_options>
            initialization_items);

    entry AlgorithmArray(
        Parallel::CProxy_GlobalCache<typename ParallelComponent::metavariables>,
        Parallel::Phase, std::unique_ptr<Parallel::Callback>,
        std::deque<typename ParallelComponent::array_index>);

    // Ordinarily, indiscriminate use of [inline] has the danger of arbitrarily
    // deep recursive function calls, which then exceed the stack limits of the
    // machine that it is running on and errors. We modify the charm definition
    // of this function (via a patch in tools/CharmModulePatches) to switch to
    // message-passing when the recursive depth is high, using
    // Parallel::detail::max_inline_methods_reached() in
    // MaxInlineMethodsReached.hpp. This allows us to inline up to a set limit
    // (improving performance) and support load-balancing and debug
    // instrumentation performed during charm entry method calls, while being
    // certain to avoid stack overflows.

    // The charm [inline] flag has been temporarily removed from the following
    // entry methods:
    // - `simple action` (both overloads)
    // - `perform_algorithm` (both overloads)
    // - `receive_data`
    // The [inline] has been removed because of a charm bug that causes inlined
    // entry methods to not be instrumented for load-balancing.
    // Once the charm fix is published and we have updated our support, the
    // [inline] flag should be restored to the listed entry methods.
    // Related charm pull request: https://github.com/UIUC-PPL/charm/pull/3352

    template <typename Action, typename... Args>
    entry void simple_action(std::tuple<Args...> & args);

    template <typename Action>
    entry void simple_action();

    template <typename Action, typename Arg>
    entry [reductiontarget] void reduction_action(Arg arg);

    entry void perform_algorithm();

    entry void perform_algorithm(bool);

    entry void start_phase(Parallel::Phase);

    template <typename MessageType>
    entry [inline] void receive_data(MessageType*);

    template <typename ReceiveTag, typename ReceiveData_t>
    entry [inline] void receive_data(typename ReceiveTag::temporal_id&,
                                     ReceiveData_t&,
                                     bool enable_if_disabled = false);

    entry void set_terminate(bool);

    template <typename ThisAction, typename PhaseIndex, typename DataBoxIndex>
    entry[local] bool invoke_iterable_action();

    entry void contribute_termination_status_to_main();
  }
}
